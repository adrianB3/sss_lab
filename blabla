using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;

namespace keysRSA
{
    class Program
    {
        static void Main(string[] args)
        {
            int op = 0;
            double[] results = new double[4] { 0, 0, 0, 0 };
            byte[] plaintext;
            do
            {
            Console.WriteLine("Meniu: ");
            Console.WriteLine("1.1024 biti");
            Console.WriteLine("2.2048 biti");
            Console.WriteLine("3.3072 biti");
            Console.WriteLine("4.4096 biti");
            Console.WriteLine("5.Iesire");
            Console.WriteLine("Introduceti optiunea dorita: ");
            op = Convert.ToInt16(Console.ReadLine());

            
                switch (op)
                {
                    case 1:
                        plaintext = System.Text.Encoding.ASCII.GetBytes("hello");
                        results = time_generation(1024, plaintext);
                        Console.WriteLine("Key Generation time at 1024 bit... " + results[0].ToString() + "ms");
                        Console.WriteLine("Encryption Time at 1024 biti..." + results[1] + "ms");
                        Console.WriteLine("Decryption Time at 1024 biti..." + results[2] + "ms");
                        Console.WriteLine("Signature Time at 1024 biti..." + results[3] + "ms");
                        break;
                    case 2:
                        plaintext = System.Text.Encoding.ASCII.GetBytes("hello");
                        results = time_generation(2048, plaintext);
                        Console.WriteLine("Key Generation time at 2048 bit... " + results[0].ToString() + "ms");
                        Console.WriteLine("Encryption Time at 2048 biti..." + results[1] + "ms");
                        Console.WriteLine("Decryption Time at 2048 biti..." + results[2] + "ms");
                        Console.WriteLine("Signature Time at 2048 biti..." + results[3] + "ms");
                        break;
                    case 3:
                        plaintext = System.Text.Encoding.ASCII.GetBytes("hello");
                        results = time_generation(3072, plaintext);
                        Console.WriteLine("Key Generation time at 3072 bit... " + results[0].ToString() + "ms");
                        Console.WriteLine("Encryption Time at 3072 biti..." + results[1] + "ms");
                        Console.WriteLine("Decryption Time at 3072 biti..." + results[2] + "ms");
                        Console.WriteLine("Signature Time at 3072 biti..." + results[3] + "ms");
                        break;
                    case 4:
                        plaintext = System.Text.Encoding.ASCII.GetBytes("hello");
                        results = time_generation(4096, plaintext);
                        Console.WriteLine("Key Generation time at 4096 bit... " + results[0].ToString() + "ms");
                        Console.WriteLine("Encryption Time at 4096 biti..." + results[1] + "ms");
                        Console.WriteLine("Decryption Time at 4096 biti..." + results[2] + "ms");
                        Console.WriteLine("Signature Time at 4096 biti..." + results[3] + "ms");
                        break;
                }
            }
            while (op != 5);
        }

        private static double[] time_generation(int p, byte[] plaintext)
        {
            double[] results = new double[4];
            RSACryptoServiceProvider myrsa = new RSACryptoServiceProvider(p); 
            System.Diagnostics.Stopwatch swatch = new System.Diagnostics.Stopwatch(); 
            int size; 
            int count = 1; 

            swatch.Start(); 
            for (int i = 0; i < count; i++) 
            { 
                myrsa = new RSACryptoServiceProvider(p); 
                size = myrsa.KeySize; 
            }  
            swatch.Stop();
            var ticks = swatch.ElapsedTicks;
            results[0] = (double)(((double)ticks / System.Diagnostics.Stopwatch.Frequency) * 1000);

            byte[] plain = new byte[20]; 
            byte[] ciphertext = myrsa.Encrypt(plain, true);

            swatch.Reset(); 
            swatch.Start();

            for (int i = 0; i < count; i++) 
            { 
                ciphertext = myrsa.Encrypt(plain, true); 
            } 
            swatch.Stop();
            ticks = swatch.ElapsedTicks;
            results[1] = (double)(((double)ticks / System.Diagnostics.Stopwatch.Frequency) * 1000);

            swatch.Reset(); 

            swatch.Start(); 
            for (int i = 0; i < count; i++) 
            { 
                plain = myrsa.Decrypt(ciphertext, true); 
            } 
            swatch.Stop();
            ticks = swatch.ElapsedTicks;
            results[2] = (double)(((double)ticks / System.Diagnostics.Stopwatch.Frequency) * 1000);

            SHA256Managed myHash = new SHA256Managed(); 
            string some_text = "this is an important message"; //sign the message 
            byte[] signature; 
            swatch.Reset();

            swatch.Start();
            for (int i = 0; i < count; i++)
            {
                signature = myrsa.SignData(System.Text.Encoding.ASCII.GetBytes(some_text), myHash);
            }
            swatch.Stop();
            ticks = swatch.ElapsedTicks;
            results[3] = (double)(((double)ticks / System.Diagnostics.Stopwatch.Frequency) * 1000);

            return results;
        }
    }
}
